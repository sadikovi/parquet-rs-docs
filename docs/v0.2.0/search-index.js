var searchIndex = {};
searchIndex["parquet"] = {"doc":"Apache Parquet is a columnar storage format that provides efficient data compression and encoding schemes to improve performance of handling complex nested data structures. Parquet implements record-shredding and assembly algorithm described in the Dremel paper.","items":[[0,"errors","parquet","Common Parquet errors and macros.",null,null],[4,"ParquetError","parquet::errors","Set of errors that can be produced during different operations in Parquet.",null,null],[13,"General","","General Parquet error. Returned when code violates normal workflow of working with Parquet files.",0,null],[13,"NYI","","\"Not yet implemented\" Parquet error. Returned when functionality is not yet available.",0,null],[13,"EOF","","\"End of file\" Parquet error. Returned when IO related failures occur, e.g. when there are not enough bytes to decode.",0,null],[6,"Result","","A specialized `Result` for Parquet errors.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parqueterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parqueterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"parqueterror"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"parqueterror"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"parqueterror"}}],[11,"from","","",0,{"inputs":[{"name":"borrowmuterror"}],"output":{"name":"parqueterror"}}],[0,"basic","parquet","Contains Rust mappings for Thrift definition. Refer to `parquet.thrift` file to see raw definitions.",null,null],[4,"Type","parquet::basic","Types supported by Parquet. These physical types are intended to be used in combination with the encodings to control the on disk storage format. For example INT16 is not included as a type since a good encoding of INT32 would handle this.",null,null],[13,"BOOLEAN","","",1,null],[13,"INT32","","",1,null],[13,"INT64","","",1,null],[13,"INT96","","",1,null],[13,"FLOAT","","",1,null],[13,"DOUBLE","","",1,null],[13,"BYTE_ARRAY","","",1,null],[13,"FIXED_LEN_BYTE_ARRAY","","",1,null],[4,"LogicalType","","Common types (logical types) used by frameworks when using Parquet. This helps map between types in those frameworks to the base types in Parquet. This is only metadata and not needed to read or write the data.",null,null],[13,"NONE","","",2,null],[13,"UTF8","","A BYTE_ARRAY actually contains UTF8 encoded chars.",2,null],[13,"MAP","","A map is converted as an optional field containing a repeated key/value pair.",2,null],[13,"MAP_KEY_VALUE","","A key/value pair is converted into a group of two fields.",2,null],[13,"LIST","","A list is converted into an optional field containing a repeated field for its values.",2,null],[13,"ENUM","","An enum is converted into a binary field",2,null],[13,"DECIMAL","","A decimal value. This may be used to annotate binary or fixed primitive types. The underlying byte array stores the unscaled value encoded as two's complement using big-endian byte order (the most significant byte is the zeroth element).",2,null],[13,"DATE","","A date stored as days since Unix epoch, encoded as the INT32 physical type.",2,null],[13,"TIME_MILLIS","","The total number of milliseconds since midnight. The value is stored as an INT32 physical type.",2,null],[13,"TIME_MICROS","","The total number of microseconds since midnight. The value is stored as an INT64 physical type.",2,null],[13,"TIMESTAMP_MILLIS","","Date and time recorded as milliseconds since the Unix epoch. Recorded as a physical type of INT64.",2,null],[13,"TIMESTAMP_MICROS","","Date and time recorded as microseconds since the Unix epoch. The value is stored as an INT64 physical type.",2,null],[13,"UINT_8","","An unsigned 8 bit integer value stored as INT32 physical type.",2,null],[13,"UINT_16","","An unsigned 16 bit integer value stored as INT32 physical type.",2,null],[13,"UINT_32","","An unsigned 32 bit integer value stored as INT32 physical type.",2,null],[13,"UINT_64","","An unsigned 64 bit integer value stored as INT64 physical type.",2,null],[13,"INT_8","","A signed 8 bit integer value stored as INT32 physical type.",2,null],[13,"INT_16","","A signed 16 bit integer value stored as INT32 physical type.",2,null],[13,"INT_32","","A signed 32 bit integer value stored as INT32 physical type.",2,null],[13,"INT_64","","A signed 64 bit integer value stored as INT64 physical type.",2,null],[13,"JSON","","A JSON document embedded within a single UTF8 column.",2,null],[13,"BSON","","A BSON document embedded within a single BINARY column.",2,null],[13,"INTERVAL","","An interval of time.",2,null],[4,"Repetition","","Representation of field types in schema.",null,null],[13,"REQUIRED","","Field is required (can not be null) and each record has exactly 1 value.",3,null],[13,"OPTIONAL","","Field is optional (can be null) and each record has 0 or 1 values.",3,null],[13,"REPEATED","","Field is repeated and can contain 0 or more values.",3,null],[4,"Encoding","","Encodings supported by Parquet. Not all encodings are valid for all types. These enums are also used to specify the encoding of definition and repetition levels.",null,null],[13,"PLAIN","","Default byte encoding. - BOOLEAN - 1 bit per value, 0 is false; 1 is true. - INT32 - 4 bytes per value, stored as little-endian. - INT64 - 8 bytes per value, stored as little-endian. - FLOAT - 4 bytes per value, stored as little-endian. - DOUBLE - 8 bytes per value, stored as little-endian. - BYTE_ARRAY - 4 byte length stored as little endian, followed by bytes. - FIXED_LEN_BYTE_ARRAY - just the bytes are stored.",4,null],[13,"PLAIN_DICTIONARY","","Deprecated dictionary encoding.",4,null],[13,"RLE","","Group packed run length encoding.",4,null],[13,"BIT_PACKED","","Bit packed encoding.",4,null],[13,"DELTA_BINARY_PACKED","","Delta encoding for integers, either INT32 or INT64.",4,null],[13,"DELTA_LENGTH_BYTE_ARRAY","","Encoding for byte arrays to separate the length values and the data.",4,null],[13,"DELTA_BYTE_ARRAY","","Incremental encoding for byte arrays.",4,null],[13,"RLE_DICTIONARY","","Dictionary encoding.",4,null],[4,"Compression","","Supported compression algorithms.",null,null],[13,"UNCOMPRESSED","","",5,null],[13,"SNAPPY","","",5,null],[13,"GZIP","","",5,null],[13,"LZO","","",5,null],[13,"BROTLI","","",5,null],[13,"LZ4","","",5,null],[13,"ZSTD","","",5,null],[4,"PageType","","Available data pages for Parquet file format. Note that some of the page types may not be supported.",null,null],[13,"DATA_PAGE","","",6,null],[13,"INDEX_PAGE","","",6,null],[13,"DICTIONARY_PAGE","","",6,null],[13,"DATA_PAGE_V2","","",6,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"logicaltype"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"logicaltype"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"pagetype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"pagetype"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"generics":["convertedtype"],"name":"option"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"fieldrepetitiontype"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"encoding"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"compressioncodec"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"pagetype"}],"output":{"name":"self"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"data_type","parquet","Data types that connect Parquet physical types with their Rust-specific representations.",null,null],[3,"Int96","parquet::data_type","Rust representation for logical type INT96, value is backed by an array of `u32`. The type only takes 12 bytes, without extra padding.",null,null],[3,"ByteArray","","Rust representation for BYTE_ARRAY and FIXED_LEN_BYTE_ARRAY Parquet physical types. Value is backed by a byte buffer.",null,null],[3,"BoolType","","",null,null],[3,"Int32Type","","",null,null],[3,"Int64Type","","",null,null],[3,"Int96Type","","",null,null],[3,"FloatType","","",null,null],[3,"DoubleType","","",null,null],[3,"ByteArrayType","","",null,null],[3,"FixedLenByteArrayType","","",null,null],[4,"Decimal","","Rust representation for Decimal values.",null,null],[13,"Int32","","Decimal backed by `i32`.",7,null],[12,"value","parquet::data_type::Decimal","",7,null],[12,"precision","","",7,null],[12,"scale","","",7,null],[13,"Int64","parquet::data_type","Decimal backed by `i64`.",7,null],[12,"value","parquet::data_type::Decimal","",7,null],[12,"precision","","",7,null],[12,"scale","","",7,null],[13,"Bytes","parquet::data_type","Decimal backed by byte array.",7,null],[12,"value","parquet::data_type::Decimal","",7,null],[12,"precision","","",7,null],[12,"scale","","",7,null],[8,"AsBytes","parquet::data_type","Converts an instance of data type to a slice of bytes as `u8`.",null,null],[10,"as_bytes","","Returns slice of bytes for this data type.",8,null],[8,"DataType","","Contains the Parquet physical type information as well as the Rust primitive type presentation.",null,null],[16,"T","","",9,null],[10,"get_physical_type","","Returns Parquet physical type.",9,{"inputs":[],"output":{"name":"type"}}],[10,"get_type_size","","Returns size in bytes for Rust representation of the physical type.",9,{"inputs":[],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"int96"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new INT96 type struct with no data set.",10,{"inputs":[],"output":{"name":"self"}}],[11,"data","","Returns underlying data as slice of [`u32`].",10,null],[11,"set_data","","Sets data for this INT96 type.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"int96"}],"output":{"name":"bool"}}],[11,"from","","",10,{"inputs":[{"generics":["u32"],"name":"vec"}],"output":{"name":"self"}}],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytearray"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new byte array with no data set.",11,{"inputs":[],"output":{"name":"self"}}],[11,"len","","Gets length of the underlying byte buffer.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"data","","Returns slice of data.",11,null],[11,"set_data","","Set data from another byte buffer.",11,{"inputs":[{"name":"self"},{"name":"bytebufferptr"}],"output":null}],[11,"slice","","Returns `ByteArray` instance with slice of values for a data.",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",11,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytearray"}}],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"bytearray"}}],[11,"from","","",11,{"inputs":[{"name":"bytebufferptr"}],"output":{"name":"bytearray"}}],[11,"from","","",11,{"inputs":[{"name":"bytebuffer"}],"output":{"name":"bytearray"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"bytearray"}],"output":{"name":"bool"}}],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"decimal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i32","","Creates new decimal value from `i32`.",7,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from_i64","","Creates new decimal value from `i64`.",7,{"inputs":[{"name":"i64"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"from_bytes","","Creates new decimal value from `ByteArray`.",7,{"inputs":[{"name":"bytearray"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"data","","Returns bytes of unscaled value.",7,null],[11,"precision","","Returns decimal precision.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"scale","","Returns decimal scale.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"as_bytes","","",10,null],[11,"as_bytes","","",11,null],[11,"as_bytes","","",7,null],[11,"get_physical_type","","",12,{"inputs":[],"output":{"name":"type"}}],[11,"get_type_size","","",12,{"inputs":[],"output":{"name":"usize"}}],[11,"get_physical_type","","",13,{"inputs":[],"output":{"name":"type"}}],[11,"get_type_size","","",13,{"inputs":[],"output":{"name":"usize"}}],[11,"get_physical_type","","",14,{"inputs":[],"output":{"name":"type"}}],[11,"get_type_size","","",14,{"inputs":[],"output":{"name":"usize"}}],[11,"get_physical_type","","",15,{"inputs":[],"output":{"name":"type"}}],[11,"get_type_size","","",15,{"inputs":[],"output":{"name":"usize"}}],[11,"get_physical_type","","",16,{"inputs":[],"output":{"name":"type"}}],[11,"get_type_size","","",16,{"inputs":[],"output":{"name":"usize"}}],[11,"get_physical_type","","",17,{"inputs":[],"output":{"name":"type"}}],[11,"get_type_size","","",17,{"inputs":[],"output":{"name":"usize"}}],[11,"get_physical_type","","",18,{"inputs":[],"output":{"name":"type"}}],[11,"get_type_size","","",18,{"inputs":[],"output":{"name":"usize"}}],[11,"get_physical_type","","",19,{"inputs":[],"output":{"name":"type"}}],[11,"get_type_size","","",19,{"inputs":[],"output":{"name":"usize"}}],[0,"memory","parquet","Utility methods and structs for working with memory.",null,null],[3,"MemTracker","parquet::memory","Struct to track memory usage information.",null,null],[3,"Buffer","","A resize-able buffer class with generic member, with optional memory tracker.",null,null],[3,"BufferPtr","","An representation of a slice on a reference-counting and read-only byte array. Sub-slices can be further created from this. The byte array will be released when all slices are dropped.",null,null],[6,"MemTrackerPtr","","Reference counted pointer for [`MemTracker`].",null,null],[6,"WeakMemTrackerPtr","","Non-owning reference for [`MemTracker`].",null,null],[6,"ByteBuffer","","Type alias for [`Buffer`].",null,null],[6,"ByteBufferPtr","","Type alias for [`BufferPtr`].",null,null],[0,"encoding","parquet","Contains all supported encoders for Parquet.",null,null],[3,"PlainEncoder","parquet::encoding","Plain encoding that supports all types. Values are encoded back to back. The plain encoding is used whenever a more efficient encoding can not be used. It stores the data in the following format: - BOOLEAN - 1 bit per value, 0 is false; 1 is true. - INT32 - 4 bytes per value, stored as little-endian. - INT64 - 8 bytes per value, stored as little-endian. - FLOAT - 4 bytes per value, stored as IEEE little-endian. - DOUBLE - 8 bytes per value, stored as IEEE little-endian. - BYTE_ARRAY - 4 byte length stored as little endian, followed by bytes. - FIXED_LEN_BYTE_ARRAY - just the bytes are stored.",null,null],[3,"DictEncoder","","Dictionary encoder. The dictionary encoding builds a dictionary of values encountered in a given column. The dictionary page is written first, before the data pages of the column chunk.",null,null],[3,"RleValueEncoder","","RLE/Bit-Packing hybrid encoding for values. Currently is used only for data pages v2 and supports boolean types.",null,null],[3,"DeltaBitPackEncoder","","Delta bit packed encoder. Consists of a header followed by blocks of delta encoded values binary packed.",null,null],[3,"DeltaLengthByteArrayEncoder","","Encoding for byte arrays to separate the length values and the data. The lengths are encoded using DELTA_BINARY_PACKED encoding, data is stored as raw bytes.",null,null],[3,"DeltaByteArrayEncoder","","Encoding for byte arrays, prefix lengths are encoded using DELTA_BINARY_PACKED encoding, followed by suffixes with DELTA_LENGTH_BYTE_ARRAY encoding.",null,null],[5,"get_encoder","","Gets a encoder for the particular data type `T` and encoding `encoding`. Memory usage for the encoder instance is tracked by `mem_tracker`.",null,{"inputs":[{"name":"columndescptr"},{"name":"encoding"},{"name":"memtrackerptr"}],"output":{"generics":["box"],"name":"result"}}],[8,"Encoder","","An Parquet encoder for the data type `T`.",null,null],[10,"put","","Encodes data from `values`.",20,null],[10,"encoding","","Returns the encoding type of this encoder.",20,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[10,"flush_buffer","","Flushes the underlying byte buffer that's being processed by this encoder, and return the immutable copy of it. This will also reset the internal state.",20,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[0,"decoding","parquet","Contains all supported decoders for Parquet.",null,null],[3,"PlainDecoder","parquet::decoding","Plain decoding that supports all types. Values are encoded back to back. For native types, data is encoded as little endian. Floating point types are encoded in IEEE. See `PlainDecoder` for more information.",null,null],[3,"DictDecoder","","Dictionary decoder. The dictionary encoding builds a dictionary of values encountered in a given column. The dictionary is be stored in a dictionary page per column chunk. See `DictEncoder` for more information.",null,null],[3,"RleValueDecoder","","RLE/Bit-Packing hybrid decoding for values. Currently is used only for data pages v2 and supports boolean types. See `RleValueEncoder` for more information.",null,null],[3,"DeltaBitPackDecoder","","Delta binary packed decoder. Supports INT32 and INT64 types. See `DeltaBitPackEncoder` for more information.",null,null],[3,"DeltaLengthByteArrayDecoder","","Delta length byte array decoder. Only applied to byte arrays to separate the length values and the data, the lengths are encoded using DELTA_BINARY_PACKED encoding. See `DeltaLengthByteArrayEncoder` for more information.",null,null],[3,"DeltaByteArrayDecoder","","Delta byte array decoder. Prefix lengths are encoded using `DELTA_BINARY_PACKED` encoding, Suffixes are stored using `DELTA_LENGTH_BYTE_ARRAY` encoding. See `DeltaByteArrayEncoder` for more information.",null,null],[5,"get_decoder","","Gets a decoder for the column descriptor `descr` and encoding type `encoding`.",null,{"inputs":[{"name":"columndescptr"},{"name":"encoding"}],"output":{"generics":["box"],"name":"result"}}],[8,"Decoder","","A Parquet decoder for the data type `T`.",null,null],[10,"set_data","","Sets the data to decode to be `data`, which should contain `num_values` of values to decode.",21,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[10,"get","","Consumes values from this decoder and write the results to `buffer`. This will try to fill up `buffer`.",21,null],[10,"values_left","","Returns the number of values left in this decoder stream.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"encoding","","Returns the encoding for this decoder.",21,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"fmt","parquet::memory","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new memory tracker.",22,{"inputs":[],"output":{"name":"memtracker"}}],[11,"memory_usage","","Returns the current memory consumption, in bytes.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"max_memory_usage","","Returns the maximum memory consumption so far, in bytes.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"alloc","","Adds `num_bytes` to the memory consumption tracked by this memory tracker.",22,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"new","","Creates new empty buffer.",23,{"inputs":[],"output":{"name":"self"}}],[11,"with_mem_tracker","","Adds [`MemTracker`] for this buffer.",23,{"inputs":[{"name":"self"},{"name":"memtrackerptr"}],"output":{"name":"self"}}],[11,"data","","Returns slice of data in this buffer.",23,null],[11,"set_data","","Sets data for this buffer.",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"resize","","Resizes underlying data in place to a new length `new_size`.",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"clear","","Clears underlying data.",23,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve","","Reserves capacity `additional_capacity` for underlying data vector.",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"consume","","Returns [`BufferPtr`] with buffer data. Buffer data is reset.",23,{"inputs":[{"name":"self"}],"output":{"name":"bufferptr"}}],[11,"push","","Adds `value` to the buffer.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"capacity","","Returns current capacity for the buffer.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size","","Returns current size for the buffer.",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_mem_tracked","","Returns `true` if memory tracker is added to buffer, `false` otherwise.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mem_tracker","","Returns memory tracker associated with this buffer. This may panic, if memory tracker is not set, use method above to check if memory tracker is available.",23,{"inputs":[{"name":"self"}],"output":{"name":"memtrackerptr"}}],[11,"index","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"as_ref","","",23,null],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bufferptr"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates new buffer from a vector.",24,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"data","","Returns slice of data in this buffer.",24,null],[11,"with_range","","Updates this buffer with new `start` position and length `len`.",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"with_mem_tracker","","Adds memory tracker to this buffer.",24,{"inputs":[{"name":"self"},{"name":"memtrackerptr"}],"output":{"name":"self"}}],[11,"start","","Returns start position of this buffer.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Returns length of this buffer",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_mem_tracked","","Returns `true` if this buffer has memory tracker, `false` otherwise.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"all","","Returns a shallow copy of the buffer. Reference counted pointer to the data is copied.",24,{"inputs":[{"name":"self"}],"output":{"name":"bufferptr"}}],[11,"start_from","","Returns a shallow copy of the buffer that starts with `start` position.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferptr"}}],[11,"range","","Returns a shallow copy that is a range slice within this buffer.",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bufferptr"}}],[11,"index","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"fmtresult"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"as_ref","","",24,null],[11,"new","parquet::encoding","Creates new plain encoder.",25,{"inputs":[{"name":"columndescptr"},{"name":"memtrackerptr"},{"generics":["u8"],"name":"vec"}],"output":{"name":"self"}}],[11,"put","","",25,null],[11,"encoding","","",25,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"flush_buffer","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"put","","",25,null],[11,"put","","",25,null],[11,"put","","",25,null],[11,"put","","",25,null],[11,"new","","Creates new dictionary encoder.",26,{"inputs":[{"name":"columndescptr"},{"name":"memtrackerptr"}],"output":{"name":"self"}}],[11,"num_entries","","Returns number of unique entries in the dictionary.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"write_dict","","Writes out the dictionary values with PLAIN encoding in a byte buffer, and return the result.",26,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"write_indices","","Writes out the dictionary values with RLE encoding in a byte buffer, and return the result.",26,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"put","","",26,null],[11,"encoding","","",26,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"flush_buffer","","",26,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"new","","Creates new rle value encoder.",27,{"inputs":[],"output":{"name":"self"}}],[11,"put","","",27,null],[11,"encoding","","",27,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"flush_buffer","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"put","","",27,null],[11,"flush_buffer","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"new","","Creates new delta bit packed encoder.",28,{"inputs":[],"output":{"name":"self"}}],[11,"put","","",28,null],[11,"encoding","","",28,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"flush_buffer","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"new","","Creates new delta length byte array encoder.",29,{"inputs":[],"output":{"name":"self"}}],[11,"put","","",29,null],[11,"encoding","","",29,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"flush_buffer","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"put","","",29,null],[11,"flush_buffer","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"new","","Creates new delta byte array encoder.",30,{"inputs":[],"output":{"name":"self"}}],[11,"put","","",30,null],[11,"encoding","","",30,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"flush_buffer","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"put","","",30,null],[11,"flush_buffer","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["bytebufferptr"],"name":"result"}}],[11,"new","parquet::decoding","Creates new plain decoder.",31,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"set_data","","",31,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"values_left","","",31,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encoding","","",31,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"get","","",31,null],[11,"get","","",31,null],[11,"set_data","","",31,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",31,null],[11,"get","","",31,null],[11,"get","","",31,null],[11,"new","","Creates new dictionary decoder.",32,{"inputs":[],"output":{"name":"self"}}],[11,"set_dict","","Decodes and sets values for dictionary using `decoder` decoder.",32,{"inputs":[{"name":"self"},{"generics":["decoder"],"name":"box"}],"output":{"name":"result"}}],[11,"set_data","","",32,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",32,null],[11,"values_left","","Number of values left in this decoder stream",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encoding","","",32,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"set_data","","",33,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"values_left","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encoding","","",33,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"get","","",33,null],[11,"set_data","","",33,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"new","","Creates new delta bit packed decoder.",34,{"inputs":[],"output":{"name":"self"}}],[11,"get_offset","","Returns underlying bit reader offset.",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_data","","",34,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",34,null],[11,"values_left","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encoding","","",34,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"new","","Creates new delta length byte array decoder.",35,{"inputs":[],"output":{"name":"self"}}],[11,"set_data","","",35,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",35,null],[11,"values_left","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encoding","","",35,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"set_data","","",35,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",35,null],[11,"new","","Creates new delta byte array decoder.",36,{"inputs":[],"output":{"name":"self"}}],[11,"set_data","","",36,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",36,null],[11,"values_left","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"encoding","","",36,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"set_data","","",36,{"inputs":[{"name":"self"},{"name":"bytebufferptr"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",36,null],[0,"compression","parquet","Contains codec interface and supported codec implementations.",null,null],[3,"SnappyCodec","parquet::compression","Codec for Snappy compression format.",null,null],[3,"GZipCodec","","Codec for GZIP compression algorithm.",null,null],[3,"BrotliCodec","","Codec for Brotli compression algorithm.",null,null],[3,"LZ4Codec","","Codec for LZ4 compression algorithm.",null,null],[5,"create_codec","","Given the compression type `codec`, returns a codec used to compress and decompress bytes for the compression type. This returns `None` if the codec type is `UNCOMPRESSED`.",null,{"inputs":[{"name":"codectype"}],"output":{"generics":["option"],"name":"result"}}],[8,"Codec","","Parquet compression codec interface.",null,null],[10,"compress","","Compresses data stored in slice `input_buf` and returns a new vector with the compressed data. TODO: it's better to pass in vec here (e.g., allow reuse),   but flate2 api doesn't support this.",37,null],[10,"decompress","","Decompresses data stored in slice `input_buf` and writes output to `output_buf`. Returns the total number of bytes written.",37,null],[11,"decompress","","",38,null],[11,"compress","","",38,null],[11,"decompress","","",39,null],[11,"compress","","",39,null],[11,"decompress","","",40,null],[11,"compress","","",40,null],[11,"decompress","","",41,null],[11,"compress","","",41,null],[0,"column","parquet","Low level column reader API.",null,null],[0,"page","parquet::column","Contains Parquet Page definitions and page reader interface.",null,null],[4,"Page","parquet::column::page","Parquet Page definition.",null,null],[13,"DataPage","","",42,null],[12,"buf","parquet::column::page::Page","",42,null],[12,"num_values","","",42,null],[12,"encoding","","",42,null],[12,"def_level_encoding","","",42,null],[12,"rep_level_encoding","","",42,null],[13,"DataPageV2","parquet::column::page","",42,null],[12,"buf","parquet::column::page::Page","",42,null],[12,"num_values","","",42,null],[12,"encoding","","",42,null],[12,"num_nulls","","",42,null],[12,"num_rows","","",42,null],[12,"def_levels_byte_len","","",42,null],[12,"rep_levels_byte_len","","",42,null],[12,"is_compressed","","",42,null],[13,"DictionaryPage","parquet::column::page","",42,null],[12,"buf","parquet::column::page::Page","",42,null],[12,"num_values","","",42,null],[12,"encoding","","",42,null],[12,"is_sorted","","",42,null],[8,"PageReader","parquet::column::page","API for reading pages from a column chunk. This offers a iterator like API to get the next page.",null,null],[10,"get_next_page","","Gets the next page in the column chunk associated with this reader. Returns `None` if there are no pages left.",43,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"page_type","","Returns `PageType` for this page.",42,{"inputs":[{"name":"self"}],"output":{"name":"pagetype"}}],[11,"buffer","","Returns internal byte buffer reference for this page.",42,{"inputs":[{"name":"self"}],"output":{"name":"bytebufferptr"}}],[11,"num_values","","Returns number of values in this page.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"encoding","","Returns this page `Encoding`.",42,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[0,"reader","parquet::column","Contains column reader API.",null,null],[3,"ColumnReaderImpl","parquet::column::reader","Typed value reader for a particular primitive column.",null,null],[4,"ColumnReader","","Column reader for a Parquet type.",null,null],[13,"BoolColumnReader","","",44,null],[13,"Int32ColumnReader","","",44,null],[13,"Int64ColumnReader","","",44,null],[13,"Int96ColumnReader","","",44,null],[13,"FloatColumnReader","","",44,null],[13,"DoubleColumnReader","","",44,null],[13,"ByteArrayColumnReader","","",44,null],[13,"FixedLenByteArrayColumnReader","","",44,null],[5,"get_column_reader","","Gets a specific column reader corresponding to column descriptor `col_descr`. The column reader will read from pages in `col_page_reader`.",null,{"inputs":[{"name":"columndescptr"},{"generics":["pagereader"],"name":"box"}],"output":{"name":"columnreader"}}],[5,"get_typed_column_reader","","Gets a typed column reader for the specific type `T`, by \"up-casting\" `col_reader` of non-generic type to a generic column reader type `ColumnReaderImpl`.",null,{"inputs":[{"name":"columnreader"}],"output":{"name":"columnreaderimpl"}}],[11,"new","","Creates new column reader based on column descriptor and page reader.",45,{"inputs":[{"name":"columndescptr"},{"generics":["pagereader"],"name":"box"}],"output":{"name":"self"}}],[11,"read_batch","","Reads a batch of values of at most `batch_size`.",45,null],[0,"record","parquet","Contains record-based API for reading Parquet files.",null,null],[3,"Row","parquet::record","`Row` represents a nested Parquet record.",null,null],[3,"List","","`List` represents a list which contains an array of elements.",null,null],[3,"Map","","`Map` represents a map which contains an list of key->value pairs.",null,null],[0,"reader","","Contains implementation of record assembly and converting Parquet types into `Row`s.",null,null],[3,"TreeBuilder","parquet::record::reader","Tree builder for `Reader` enum. Serves as a container of options for building a reader tree and a builder, and accessing a records iterator [`RowIter`].",null,null],[3,"RowIter","","Iterator of `Row`s. It is used either for a single row group to iterate over data in that row group, or an entire file with auto buffering of all row groups.",null,null],[3,"ReaderIter","","Internal iterator of `Row`s for a reader.",null,null],[4,"Reader","","Reader tree for record assembly",null,null],[13,"PrimitiveReader","","",46,null],[13,"OptionReader","","",46,null],[13,"GroupReader","","",46,null],[13,"RepeatedReader","","",46,null],[13,"KeyValueReader","","",46,null],[11,"new","","Creates new tree builder with default parameters.",47,{"inputs":[],"output":{"name":"self"}}],[11,"with_batch_size","","Sets batch size for this tree builder.",47,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"build","","Creates new root reader for provided schema and row group.",47,{"inputs":[{"name":"self"},{"name":"schemadescptr"},{"name":"rowgroupreader"}],"output":{"name":"reader"}}],[11,"as_iter","","Creates iterator of `Row`s directly from schema descriptor and row group.",47,{"inputs":[{"name":"self"},{"name":"schemadescptr"},{"name":"rowgroupreader"}],"output":{"name":"readeriter"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_file","","Creates iterator of `Row`s for all row groups in a file.",48,{"inputs":[{"generics":["type"],"name":"option"},{"name":"filereader"}],"output":{"name":"result"}}],[11,"from_row_group","","Creates iterator of `Row`s for a specific row group.",48,{"inputs":[{"generics":["type"],"name":"option"},{"name":"rowgroupreader"}],"output":{"name":"result"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["row"],"name":"option"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["row"],"name":"option"}}],[11,"clone","parquet::record","",50,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"len","","Get the number of fields in this row.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_bool","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"result"}}],[11,"get_byte","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"result"}}],[11,"get_short","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"result"}}],[11,"get_int","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"result"}}],[11,"get_long","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"get_float","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["f32"],"name":"result"}}],[11,"get_double","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["f64"],"name":"result"}}],[11,"get_timestamp","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"get_decimal","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["decimal"],"name":"result"}}],[11,"get_string","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["string"],"name":"result"}}],[11,"get_bytes","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bytearray"],"name":"result"}}],[11,"get_group","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"result"}}],[11,"get_list","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["list"],"name":"result"}}],[11,"get_map","","",50,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["map"],"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"len","","Get the number of fields in this row",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_bool","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"result"}}],[11,"get_byte","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"result"}}],[11,"get_short","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"result"}}],[11,"get_int","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"result"}}],[11,"get_long","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"get_float","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["f32"],"name":"result"}}],[11,"get_double","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["f64"],"name":"result"}}],[11,"get_timestamp","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"get_decimal","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["decimal"],"name":"result"}}],[11,"get_string","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["string"],"name":"result"}}],[11,"get_bytes","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bytearray"],"name":"result"}}],[11,"get_group","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"result"}}],[11,"get_list","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["list"],"name":"result"}}],[11,"get_map","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["map"],"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"map"}],"output":{"name":"bool"}}],[11,"len","","Get the number of fields in this row",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_keys","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["listaccessor"],"name":"box"}}],[11,"get_values","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["listaccessor"],"name":"box"}}],[8,"RowAccessor","","Trait for type-safe convenient access to fields within a Row.",null,null],[10,"get_bool","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"result"}}],[10,"get_byte","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"result"}}],[10,"get_short","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"result"}}],[10,"get_int","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"result"}}],[10,"get_long","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[10,"get_float","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["f32"],"name":"result"}}],[10,"get_double","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["f64"],"name":"result"}}],[10,"get_timestamp","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[10,"get_decimal","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["decimal"],"name":"result"}}],[10,"get_string","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["string"],"name":"result"}}],[10,"get_bytes","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bytearray"],"name":"result"}}],[10,"get_group","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"result"}}],[10,"get_list","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["list"],"name":"result"}}],[10,"get_map","","",53,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["map"],"name":"result"}}],[8,"ListAccessor","","Trait for type-safe access of an index for a `List`. Note that the get_XXX methods do not do bound checking.",null,null],[10,"get_bool","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bool"],"name":"result"}}],[10,"get_byte","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i8"],"name":"result"}}],[10,"get_short","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i16"],"name":"result"}}],[10,"get_int","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"result"}}],[10,"get_long","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[10,"get_float","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["f32"],"name":"result"}}],[10,"get_double","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["f64"],"name":"result"}}],[10,"get_timestamp","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[10,"get_decimal","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["decimal"],"name":"result"}}],[10,"get_string","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["string"],"name":"result"}}],[10,"get_bytes","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["bytearray"],"name":"result"}}],[10,"get_group","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["row"],"name":"result"}}],[10,"get_list","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["list"],"name":"result"}}],[10,"get_map","","",54,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["map"],"name":"result"}}],[8,"MapAccessor","","Trait for type-safe access of an index for a `Map`",null,null],[10,"get_keys","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["listaccessor"],"name":"box"}}],[10,"get_values","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["listaccessor"],"name":"box"}}],[0,"schema","parquet","Parquet schema definitions and methods to print and parse schema.",null,null],[0,"types","parquet::schema","Contains structs and methods to build Parquet schema and schema descriptors.",null,null],[3,"PrimitiveTypeBuilder","parquet::schema::types","A builder for primitive types. All attributes are optional except the name and physical type. Note that if not specified explicitly, `Repetition::OPTIONAL` is used.",null,null],[3,"GroupTypeBuilder","","A builder for group types. All attributes are optional except the name. Note that if not specified explicitly, `None` is used as the repetition of the group, which means it is a root (message) type.",null,null],[3,"BasicTypeInfo","","Basic type info. This contains information such as the name of the type, the repetition level, the logical type and the kind of the type (group, primitive).",null,null],[3,"ColumnPath","","Represents a path in a nested schema",null,null],[3,"ColumnDescriptor","","A descriptor for leaf-level primitive columns. This encapsulates information such as definition and repetition levels and is used to re-assemble nested data.",null,null],[3,"SchemaDescriptor","","A schema descriptor. This encapsulates the top-level schemas for all the columns, as well as all descriptors for all the primitive columns.",null,null],[4,"Type","","Representation of a Parquet type. Used to describe primitive leaf fields and structs, including top-level schema. Note that the top-level schema type is represented using `GroupType` whose repetition is `None`.",null,null],[13,"PrimitiveType","","",56,null],[12,"basic_info","parquet::schema::types::Type","",56,null],[12,"physical_type","","",56,null],[12,"type_length","","",56,null],[12,"scale","","",56,null],[12,"precision","","",56,null],[13,"GroupType","parquet::schema::types","",56,null],[12,"basic_info","parquet::schema::types::Type","",56,null],[12,"fields","","",56,null],[5,"from_thrift","parquet::schema::types","Method to convert from Thrift.",null,null],[6,"TypePtr","","Type alias for `Rc<Type>`.",null,null],[6,"SchemaDescPtr","","Type alias for `Rc<SchemaDescriptor>`.",null,null],[6,"ColumnDescPtr","","Type alias for `Rc<ColumnDescriptor>`.",null,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"primitive_type_builder","","Creates primitive type builder with provided field name and physical type.",56,{"inputs":[{"name":"str"},{"name":"physicaltype"}],"output":{"name":"primitivetypebuilder"}}],[11,"group_type_builder","","Creates group type builder with provided column name.",56,{"inputs":[{"name":"str"}],"output":{"name":"grouptypebuilder"}}],[11,"get_basic_info","","Returns [`BasicTypeInfo`] information about the type.",56,{"inputs":[{"name":"self"}],"output":{"name":"basictypeinfo"}}],[11,"name","","Returns this type's field name.",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_fields","","Gets the fields from this group type. Note that this will panic if called on a non-group type.",56,null],[11,"get_physical_type","","Gets physical type of this primitive type. Note that this will panic if called on a non-primitive type.",56,{"inputs":[{"name":"self"}],"output":{"name":"physicaltype"}}],[11,"check_contains","","Checks if `sub_type` schema is part of current schema. This method can be used to check if projected columns are part of the root schema.",56,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"is_primitive","","Returns `true` if this type is a primitive type, `false` otherwise.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_group","","Returns `true` if this type is a group type, `false` otherwise.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_schema","","Returns `true` if this type is the top-level schema type (message type).",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates new primitive type builder with provided field name and physical type.",57,{"inputs":[{"name":"str"},{"name":"physicaltype"}],"output":{"name":"self"}}],[11,"with_repetition","","Sets `Repetition` for this field and returns itself.",57,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"self"}}],[11,"with_logical_type","","Sets `LogicalType` for this field and returns itself.",57,{"inputs":[{"name":"self"},{"name":"logicaltype"}],"output":{"name":"self"}}],[11,"with_length","","Sets type length and returns itself. This is only applied to FIXED_LEN_BYTE_ARRAY and INT96 (INTERVAL) types, because they maintain fixed size underlying byte array. By default, value is `0`.",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"with_precision","","Sets precision for Parquet DECIMAL physical type and returns itself. By default, it equals to `0` and used only for decimal context.",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"with_scale","","Sets scale for Parquet DECIMAL physical type and returns itself. By default, it equals to `0` and used only for decimal context.",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"with_id","","Sets optional field id and returns itself.",57,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"build","","Creates a new `PrimitiveType` instance from the collected attributes. Returns `Err` in case of any building conditions are not met.",57,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"result"}}],[11,"new","","Creates new group type builder with provided field name.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"with_repetition","","Sets `Repetition` for this field and returns itself.",58,{"inputs":[{"name":"self"},{"name":"repetition"}],"output":{"name":"self"}}],[11,"with_logical_type","","Sets `LogicalType` for this field and returns itself.",58,{"inputs":[{"name":"self"},{"name":"logicaltype"}],"output":{"name":"self"}}],[11,"with_fields","","Sets a list of fields that should be child nodes of this field. Returns updated self.",58,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"with_id","","Sets optional field id and returns itself.",58,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[11,"build","","Creates a new `GroupType` instance from the gathered attributes.",58,{"inputs":[{"name":"self"}],"output":{"generics":["type"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"basictypeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"basictypeinfo"}],"output":{"name":"bool"}}],[11,"name","","Returns field name.",59,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_repetition","","Returns `true` if type has repetition field set, `false` otherwise. This is mostly applied to group type, because primitive type always has repetition set.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"repetition","","Returns `Repetition` value for the type.",59,{"inputs":[{"name":"self"}],"output":{"name":"repetition"}}],[11,"logical_type","","Returns `LogicalType` value for the type.",59,{"inputs":[{"name":"self"}],"output":{"name":"logicaltype"}}],[11,"has_id","","Returns `true` if id is set, `false` otherwise.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"id","","Returns id value for the type.",59,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"columnpath"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"columnpath"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"columnpath"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"new","","Creates new column path from vector of field names.",60,{"inputs":[{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"string","","Returns string representation of this column path. ```rust use parquet::schema::types::ColumnPath;",60,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",60,{"inputs":[{"generics":["string"],"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",60,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",60,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"new","","Creates new descriptor for leaf-level column.",61,{"inputs":[{"name":"typeptr"},{"generics":["typeptr"],"name":"option"},{"name":"i16"},{"name":"i16"},{"name":"columnpath"}],"output":{"name":"self"}}],[11,"max_def_level","","Returns maximum definition level for this column.",61,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"max_rep_level","","Returns maximum repetition level for this column.",61,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"path","","Returns [`ColumnPath`] for this column.",61,{"inputs":[{"name":"self"}],"output":{"name":"columnpath"}}],[11,"root_type","","Returns root `Type` (most top-level parent field) for this leaf column.",61,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"name","","Returns column name.",61,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"logical_type","","Returns `LogicalType` for this column.",61,{"inputs":[{"name":"self"}],"output":{"name":"logicaltype"}}],[11,"physical_type","","Returns physical type for this column. Note that it will panic if called on a non-primitive type.",61,{"inputs":[{"name":"self"}],"output":{"name":"physicaltype"}}],[11,"type_length","","Returns type length for this column. Note that it will panic if called on a non-primitive type.",61,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"type_precision","","Returns type precision for this column. Note that it will panic if called on a non-primitive type.",61,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"type_scale","","Returns type scale for this column. Note that it will panic if called on a non-primitive type.",61,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"new","","Creates new schema descriptor from Parquet schema.",62,{"inputs":[{"name":"typeptr"}],"output":{"name":"self"}}],[11,"column","","Returns [`ColumnDescriptor`] for a field position.",62,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"columndescptr"}}],[11,"columns","","Returns slice of [`ColumnDescriptor`].",62,null],[11,"num_columns","","Returns number of leaf-level columns.",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_column_root","","Returns column root `Type` for a field position.",62,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"type"}}],[11,"root_schema","","Returns schema as `Type`.",62,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"name","","Returns schema name.",62,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"printer","parquet::schema","Parquet schema printer. Provides methods to print Parquet file schema and list file metadata.",null,null],[5,"print_parquet_metadata","parquet::schema::printer","Prints Parquet metadata `ParquetMetaData` information.",null,{"inputs":[{"name":"write"},{"name":"parquetmetadata"}],"output":null}],[5,"print_file_metadata","","Prints file metadata `FileMetaData` information.",null,{"inputs":[{"name":"write"},{"name":"filemetadata"}],"output":null}],[5,"print_schema","","Prints Parquet `Type` information.",null,{"inputs":[{"name":"write"},{"name":"type"}],"output":null}],[0,"parser","parquet::schema","Parquet schema parser. Provides methods to parse and validate string message type into Parquet `Type`.",null,null],[5,"parse_message_type","parquet::schema::parser","Parses message type as string into a Parquet `Type` which, for example, could be used to extract individual columns. Returns Parquet general error when parsing or validation fails.",null,{"inputs":[{"name":"str"}],"output":{"generics":["type"],"name":"result"}}],[0,"file","parquet","Main entrypoint for working with Parquet API. Provides access to file and row group readers, record API, etc.",null,null],[0,"metadata","parquet::file","Contains information about available Parquet metadata.",null,null],[3,"ParquetMetaData","parquet::file::metadata","Global Parquet metadata.",null,null],[3,"FileMetaData","","Metadata for a Parquet file.",null,null],[3,"RowGroupMetaData","","Metadata for a row group.",null,null],[3,"ColumnChunkMetaData","","Metadata for a column chunk.",null,null],[6,"ParquetMetaDataPtr","","Reference counted pointer for [`ParquetMetaData`].",null,null],[6,"FileMetaDataPtr","","Reference counted pointer for [`FileMetaData`].",null,null],[6,"RowGroupMetaDataPtr","","Reference counted pointer for [`RowGroupMetaData`].",null,null],[6,"ColumnChunkMetaDataPtr","","Reference counted pointer for [`ColumnChunkMetaData`].",null,null],[11,"new","","Creates Parquet metadata from file metadata and a list of row group metadata for each available row group.",63,{"inputs":[{"name":"filemetadata"},{"generics":["rowgroupmetadata"],"name":"vec"}],"output":{"name":"self"}}],[11,"file_metadata","","Returns file metadata as reference counted clone.",63,{"inputs":[{"name":"self"}],"output":{"name":"filemetadataptr"}}],[11,"num_row_groups","","Returns number of row groups in this file.",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"row_group","","Returns row group metadata for `i`th position. Position should be less than number of row groups `num_row_groups`.",63,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"rowgroupmetadataptr"}}],[11,"row_groups","","Returns slice of row group reference counted pointers in this file.",63,null],[11,"new","","Creates new file metadata.",64,{"inputs":[{"name":"i32"},{"name":"i64"},{"generics":["string"],"name":"option"},{"name":"typeptr"},{"name":"schemadescptr"}],"output":{"name":"self"}}],[11,"version","","Returns version of this file.",64,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"num_rows","","Returns number of rows in the file.",64,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"created_by","","String message for application that wrote this file.",64,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"schema","","Returns Parquet ['Type`] that describes schema in this file.",64,{"inputs":[{"name":"self"}],"output":{"name":"schematype"}}],[11,"schema_descr","","Returns a reference to schema descriptor.",64,{"inputs":[{"name":"self"}],"output":{"name":"schemadescriptor"}}],[11,"schema_descr_ptr","","Returns reference counted clone for schema descriptor.",64,{"inputs":[{"name":"self"}],"output":{"name":"schemadescptr"}}],[11,"num_columns","","Number of columns in this row group.",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","Returns column chunk metadata for `i`th column.",65,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"columnchunkmetadata"}}],[11,"columns","","Returns slice of column chunk metadata [`Rc`] pointers.",65,null],[11,"num_rows","","Number of rows in this row group.",65,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"total_byte_size","","Total byte size of all uncompressed column data in this row group.",65,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"schema_descr","","Returns reference to a schema descriptor.",65,{"inputs":[{"name":"self"}],"output":{"name":"schemadescriptor"}}],[11,"schema_descr_ptr","","Returns reference counted clone of schema descriptor.",65,{"inputs":[{"name":"self"}],"output":{"name":"schemadescptr"}}],[11,"from_thrift","","Method to convert from Thrift.",65,{"inputs":[{"name":"schemadescptr"},{"name":"rowgroup"}],"output":{"generics":["rowgroupmetadata"],"name":"result"}}],[11,"file_path","","File where the column chunk is stored.",66,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"file_offset","","Byte offset in `file_path()`.",66,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"column_type","","Type of this column. Must be primitive.",66,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"column_path","","Path (or identifier) of this column.",66,{"inputs":[{"name":"self"}],"output":{"name":"columnpath"}}],[11,"column_descr","","Descriptor for this column.",66,{"inputs":[{"name":"self"}],"output":{"name":"columndescriptor"}}],[11,"column_descr_ptr","","Reference counted clone of descriptor for this column.",66,{"inputs":[{"name":"self"}],"output":{"name":"columndescptr"}}],[11,"encodings","","All encodings used for this column.",66,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"num_values","","Total number of values in this column chunk.",66,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"compression","","Compression for this column.",66,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"compressed_size","","Returns the total compressed data size of this column chunk.",66,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"uncompressed_size","","Returns the total uncompressed data size of this column chunk.",66,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"data_page_offset","","Returns the offset for the column data.",66,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"has_index_page","","Returns `true` if this column chunk contains a index page, `false` otherwise.",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index_page_offset","","Returns the offset for the index page.",66,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"has_dictionary_page","","Returns `true` if this column chunk contains a dictionary page, `false` otherwise.",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dictionary_page_offset","","TODO: add statistics Returns the offset for the dictionary page, if any.",66,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[0,"reader","parquet::file","Contains file reader API, and provides methods to access file metadata, row group readers to read individual column chunks, or access record iterator.",null,null],[3,"SerializedFileReader","parquet::file::reader","A serialized implementation for Parquet [`FileReader`].",null,null],[3,"SerializedRowGroupReader","","A serialized implementation for Parquet [`RowGroupReader`].",null,null],[3,"SerializedPageReader","","A serialized implementation for Parquet [`PageReader`].",null,null],[8,"FileReader","","Parquet file reader API. With this, user can get metadata information about the Parquet file, can get reader for each row group, and access record iterator.",null,null],[10,"metadata","","Get metadata information about this file.",67,{"inputs":[{"name":"self"}],"output":{"name":"parquetmetadataptr"}}],[10,"num_row_groups","","Get the total number of row groups for this file.",67,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"get_row_group","","Get the `i`th row group reader. Note this doesn't do bound check.",67,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["box"],"name":"result"}}],[10,"get_row_iter","","Get full iterator of `Row`s from a file (over all row groups).",67,{"inputs":[{"name":"self"},{"generics":["schematype"],"name":"option"}],"output":{"generics":["rowiter"],"name":"result"}}],[8,"RowGroupReader","","Parquet row group reader API. With this, user can get metadata information about the row group, as well as readers for each individual column chunk.",null,null],[10,"metadata","","Get metadata information about this row group.",68,{"inputs":[{"name":"self"}],"output":{"name":"rowgroupmetadataptr"}}],[10,"num_columns","","Get the total number of column chunks in this row group.",68,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"get_column_page_reader","","Get page reader for the `i`th column chunk.",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["box"],"name":"result"}}],[10,"get_column_reader","","Get value reader for the `i`th column chunk.",68,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["columnreader"],"name":"result"}}],[10,"get_row_iter","","Get iterator of `Row`s from this row group.",68,{"inputs":[{"name":"self"},{"generics":["schematype"],"name":"option"}],"output":{"generics":["rowiter"],"name":"result"}}],[11,"new","","Creates file reader from a Parquet file. Returns error if Parquet file does not exist or is corrupt.",69,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"metadata","","",69,{"inputs":[{"name":"self"}],"output":{"name":"parquetmetadataptr"}}],[11,"num_row_groups","","",69,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_row_group","","",69,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["box"],"name":"result"}}],[11,"get_row_iter","","",69,{"inputs":[{"name":"self"},{"generics":["schematype"],"name":"option"}],"output":{"generics":["rowiter"],"name":"result"}}],[11,"metadata","","",70,{"inputs":[{"name":"self"}],"output":{"name":"rowgroupmetadataptr"}}],[11,"num_columns","","",70,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_column_page_reader","","",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["box"],"name":"result"}}],[11,"get_column_reader","","",70,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["columnreader"],"name":"result"}}],[11,"get_row_iter","","",70,{"inputs":[{"name":"self"},{"generics":["schematype"],"name":"option"}],"output":{"generics":["rowiter"],"name":"result"}}],[11,"get_next_page","","",71,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}]],"paths":[[4,"ParquetError"],[4,"Type"],[4,"LogicalType"],[4,"Repetition"],[4,"Encoding"],[4,"Compression"],[4,"PageType"],[4,"Decimal"],[8,"AsBytes"],[8,"DataType"],[3,"Int96"],[3,"ByteArray"],[3,"BoolType"],[3,"Int32Type"],[3,"Int64Type"],[3,"Int96Type"],[3,"FloatType"],[3,"DoubleType"],[3,"ByteArrayType"],[3,"FixedLenByteArrayType"],[8,"Encoder"],[8,"Decoder"],[3,"MemTracker"],[3,"Buffer"],[3,"BufferPtr"],[3,"PlainEncoder"],[3,"DictEncoder"],[3,"RleValueEncoder"],[3,"DeltaBitPackEncoder"],[3,"DeltaLengthByteArrayEncoder"],[3,"DeltaByteArrayEncoder"],[3,"PlainDecoder"],[3,"DictDecoder"],[3,"RleValueDecoder"],[3,"DeltaBitPackDecoder"],[3,"DeltaLengthByteArrayDecoder"],[3,"DeltaByteArrayDecoder"],[8,"Codec"],[3,"SnappyCodec"],[3,"GZipCodec"],[3,"BrotliCodec"],[3,"LZ4Codec"],[4,"Page"],[8,"PageReader"],[4,"ColumnReader"],[3,"ColumnReaderImpl"],[4,"Reader"],[3,"TreeBuilder"],[3,"RowIter"],[3,"ReaderIter"],[3,"Row"],[3,"List"],[3,"Map"],[8,"RowAccessor"],[8,"ListAccessor"],[8,"MapAccessor"],[4,"Type"],[3,"PrimitiveTypeBuilder"],[3,"GroupTypeBuilder"],[3,"BasicTypeInfo"],[3,"ColumnPath"],[3,"ColumnDescriptor"],[3,"SchemaDescriptor"],[3,"ParquetMetaData"],[3,"FileMetaData"],[3,"RowGroupMetaData"],[3,"ColumnChunkMetaData"],[8,"FileReader"],[8,"RowGroupReader"],[3,"SerializedFileReader"],[3,"SerializedRowGroupReader"],[3,"SerializedPageReader"]]};
searchIndex["parquet_read"] = {"doc":"Binary file to read data from a Parquet file.","items":[],"paths":[]};
searchIndex["parquet_schema"] = {"doc":"Binary file to print the schema and metadata of a Parquet file.","items":[],"paths":[]};
initSearch(searchIndex);
